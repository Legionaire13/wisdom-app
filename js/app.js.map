{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["\"use strict\";\r\nimport appData from \"./appData.js\";\r\nimport viewer from \"./viewer.js\";\r\n\r\n(function () {\r\n  let recentAnswers = [];\r\n\r\n  function rememberRecentAnswer(phrase) {\r\n    if (!recentAnswers.includes(phrase)) {\r\n      recentAnswers.unshift(phrase);\r\n    }\r\n    if (recentAnswers.length >= 10) recentAnswers.length = 10;\r\n    // console.log(\"answer remembered!\", phrase, recentAnswers)\r\n  }\r\n\r\n  // viewer.renderResult();\r\n  function userInputHandler() {\r\n    let userInput = viewer.getInputValue().toLowerCase();\r\n\r\n    // рандомный ответ из нескольких подходящих\r\n    function _getRandowmAnswer(arr) {\r\n      return arr[Math.floor((Math.random() * 10) % arr.length)]\r\n    }\r\n\r\n    function _findMaxRatedAnswers(arr, propName) {\r\n      let rateArr = arr.map((item) => item[propName]),\r\n          maxRate = Math.max(...rateArr)\r\n      return arr.filter((obj) => obj.rate == maxRate)\r\n    }\r\n\r\n    function _checkForRecentAnswers(arr) {\r\n      if (arr.length <= 0) return arr;\r\n      return arr.map((obj) => {\r\n        if (recentAnswers.includes(obj.phrase)) {\r\n            (obj.rate > 2) ? obj.rate = 1 : obj.rate--;\r\n        }\r\n        return obj;\r\n      });\r\n    }\r\n\r\n    if (userInput) {\r\n\r\n      let pullOfAnswers = [];\r\n\r\n      appData.answers.forEach((obj) => {\r\n        // mock:\r\n        // {\r\n        //   phrase: \"Большой зелёный барабан\",\r\n        //   keywords: [\"подарок\", \"загадал\", \"похож\", \"инструмент\", \"лежит\"]\r\n        // }\r\n\r\n        const currentObj = {\r\n          phrase: obj.phrase,\r\n          rate: 0\r\n        }\r\n\r\n        obj.keywords.forEach((keyword) => {\r\n          if (userInput.includes(keyword)) return currentObj.rate++\r\n        })\r\n\r\n        if (currentObj.rate > 0) return pullOfAnswers.push(currentObj)\r\n      })\r\n\r\n      if (recentAnswers.length > 0) {\r\n        pullOfAnswers = _checkForRecentAnswers(pullOfAnswers)\r\n      }\r\n\r\n      console.log(\"Recent Answers: \\n\", recentAnswers, \"\\nRated answers: \\n\", pullOfAnswers.sort((a, b) => b.rate - a.rate));\r\n\r\n      // если pullOfAnswers не пустой:\r\n      if (pullOfAnswers.length > 0) {\r\n\r\n        pullOfAnswers = _findMaxRatedAnswers(pullOfAnswers, \"rate\")\r\n          .map((obj) => obj.phrase)\r\n\r\n        let answer = _getRandowmAnswer(pullOfAnswers)\r\n        viewer.renderResult(answer)\r\n        rememberRecentAnswer(answer)\r\n        // console.log(\"not empty, recent answers: \", recentAnswers)\r\n        // console.log(\"resulting array of answers:\\n\" + pullOfAnswers)\r\n\r\n      } else {\r\n        // pullOfAnswers пустой:\r\n        pullOfAnswers = appData.fallback;\r\n\r\n        // возможно стоит фильтровать здесь так\r\n        pullOfAnswers = pullOfAnswers.filter((obj) => !(recentAnswers.includes(obj.phrase)))\r\n        let answer = _getRandowmAnswer(pullOfAnswers)\r\n        viewer.renderResult(answer)\r\n        rememberRecentAnswer(answer)\r\n      }\r\n    }\r\n  }\r\n\r\n  // общий обработчик на input\r\n  document.getElementById(\"question\").addEventListener(\"change\", userInputHandler)\r\n\r\n}());"],"file":"app.js"}