{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["\"use strict\";\nimport appData from \"./appData.js\";\nimport viewer from \"./viewer.js\";\n\n(function () {\n  let recentAnswers = [];\n\n  function rememberRecentAnswer(phrase) {\n    if (!recentAnswers.includes(phrase)) {\n      recentAnswers.unshift(phrase);\n    }\n    if (recentAnswers.length >= 10) recentAnswers.length = 10;\n    // console.log(\"answer remembered!\", phrase, recentAnswers)\n  }\n\n  // viewer.renderResult();\n  function userInputHandler() {\n    let userInput = viewer.getInputValue().toLowerCase();\n\n    // рандомный ответ из нескольких подходящих\n    function _getRandowmAnswer(arr) {\n      return arr[Math.floor((Math.random() * 10) % arr.length)]\n    }\n\n    function _findMaxRatedAnswers(arr, propName) {\n      let rateArr = arr.map((item) => item[propName]),\n          maxRate = Math.max(...rateArr)\n      return arr.filter((obj) => obj.rate == maxRate)\n    }\n\n    function _checkForRecentAnswers(arr) {\n      if (arr.length <= 0) return arr;\n      return arr.map((obj) => {\n        if (recentAnswers.includes(obj.phrase)) {\n            (obj.rate > 2) ? obj.rate = 1 : obj.rate--;\n        }\n        return obj;\n      });\n    }\n\n    if (userInput) {\n\n      let pullOfAnswers = [];\n\n      appData.answers.forEach((obj) => {\n        // mock:\n        // {\n        //   phrase: \"Большой зелёный барабан\",\n        //   keywords: [\"подарок\", \"загадал\", \"похож\", \"инструмент\", \"лежит\"]\n        // }\n\n        const currentObj = {\n          phrase: obj.phrase,\n          rate: 0\n        }\n\n        obj.keywords.forEach((keyword) => {\n          if (userInput.includes(keyword)) return currentObj.rate++\n        })\n\n        if (currentObj.rate > 0) return pullOfAnswers.push(currentObj)\n      })\n\n      if (recentAnswers.length > 0) {\n        pullOfAnswers = _checkForRecentAnswers(pullOfAnswers)\n      }\n\n      console.log(\"Recent Answers: \\n\", recentAnswers, \"\\nRated answers: \\n\", pullOfAnswers.sort((a, b) => b.rate - a.rate));\n\n      // если pullOfAnswers не пустой:\n      if (pullOfAnswers.length > 0) {\n\n        pullOfAnswers = _findMaxRatedAnswers(pullOfAnswers, \"rate\")\n          .map((obj) => obj.phrase)\n\n        let answer = _getRandowmAnswer(pullOfAnswers)\n        viewer.renderResult(answer)\n        rememberRecentAnswer(answer)\n        // console.log(\"not empty, recent answers: \", recentAnswers)\n        // console.log(\"resulting array of answers:\\n\" + pullOfAnswers)\n\n      } else {\n        // pullOfAnswers пустой:\n        pullOfAnswers = appData.fallback;\n\n        // возможно стоит фильтровать здесь так\n        pullOfAnswers = pullOfAnswers.filter((obj) => !(recentAnswers.includes(obj.phrase)))\n        let answer = _getRandowmAnswer(pullOfAnswers)\n        viewer.renderResult(answer)\n        rememberRecentAnswer(answer)\n      }\n    }\n  }\n\n  // общий обработчик на input\n  document.getElementById(\"question\").addEventListener(\"change\", userInputHandler)\n\n}());"],"file":"app.js"}